node {
      stage ('Code from SCM') {
        git credentialsId: 'f2a21285-619c-43bf-9652-5fa30c27c559', url: 'https://github.com/vishalrs18/webapp_jenkins'
      }
      stage ('Build') {
        sh '''mvn clean install -DskipTests'''
      }
      stage ('Build') {
        sh '''mvn checkstyle:checkstyle'''
      }
      stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar'
            }
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=quality-demo \
                   -Dsonar.projectName=quality-demo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ '''
              }
            }

        stage("Quality Gate") {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
            }
        }
     }
     ===========================================================================================================================================================================
     pipeline {
    agent any
    tools {
	    maven "maven"
	    jdk "java"
	}
    stages{
        stage('Fetch code') {
          steps{
              git branch: 'vp-rem', url:'https://github.com/devopshydclub/vprofile-repo.git'
          }  
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar'
            }
            steps {
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=demo \
                   -Dsonar.projectName=demo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '172.31.39.240:8081/',
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: 'sampleapp',
                  credentialsId: 'nexus',
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
    ]
 )
            }
        }
    }
}
===========================================================================================================
pipeline {
    agent any
    tools {
	    maven "maven"
	    jdk "java"
	}

    environment {
        registryCredential = 'ecr:ap-northeast-1:awscred'
        appRegistry = "802613590849.dkr.ecr.ap-northeast-1.amazonaws.com/demo"
        vprofileRegistry = "https://802613590849.dkr.ecr.ap-northeast-1.amazonaws.com"
        cluster = "demoapp"
        service = "demoservice"
    }
  stages {
    stage('Fetch code'){
      steps {
        git branch: 'docker', url: 'https://github.com/devopshydclub/vprofile-project.git'
      }
    }
    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

    stage('Build App Image') {
       steps {
       
         script {
                dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
             }

     }
    
    }


    stage('Upload App Image') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                dockerImage.push('latest')
              }
            }
          }
     }
     
     stage('Deploy to ecs') {
        steps {
         withAWS(credentials: 'awscred', region: 'ap-northeast-1') {
          sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
         }
         }
     }
  }
}
=====================================================================================================================================================================
pipeline {
    agent any
    tools {
	    maven "maven"
	    jdk "java"
	}

    environment {
        registryCredential = 'ecr:ap-northeast-1:awscred'
        appRegistry = "802613590849.dkr.ecr.ap-northeast-1.amazonaws.com/demo"
        vprofileRegistry = "https://802613590849.dkr.ecr.ap-northeast-1.amazonaws.com"
    }
  stages {
    stage('Fetch code'){
      steps {
        git branch: 'docker', url: 'https://github.com/vishalrs18/vprofile-project.git'
      }
    }
    
    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

    stage('Build App Image') {
       steps {
         script {
                dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
             }

     }
    
    }

    stage('Upload App Image') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                dockerImage.push('latest')
              }
            }
          }
     }
  }
}
